import numpy as np
import torch.utils
import torch.nn as nn
from torch.utils.data import dataloader,Dataset
import matplotlib.pyplot as plt
import os
from torchvision import datasets, transforms, models
from acc import resnet_forward
import mymodel
import cv2
from PIL import Image

# a = torch.cuda.is_available()
# print(a)
data_dir = r"D:\RSketch"
input_size = 224
batch_size = 50
num_category = 15
query_num = 0
database_num = 0
data_transforms = {
    'train': transforms.Compose([
        transforms.Resize([input_size, input_size]),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'test': transforms.Compose([
        transforms.Resize([input_size, input_size]),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

class TestDataset(Dataset):
    def __init__(self, test_A_dataset, test_B_dataset):
        self.test_A_dataset = test_A_dataset
        self.test_B_dataset = test_B_dataset
        self.transform = self.test_A_dataset.transform
        self.test_label_num = len(self.test_A_dataset.classes)
        self.test_A_data = self.test_A_dataset.imgs
        self.test_B_data = self.test_B_dataset.imgs
        test_A_datanum = len(self.test_A_data)
        self.test_A_dict = dict((i, j) for i, j in self.test_A_data)
        self.test_B_dict = dict((i, j) for i, j in self.test_B_data)
        self.test_A_dict_list = list(self.test_A_dict.items())
        self.test_B_dict_list = list(self.test_B_dict.items())
    def __getitem__(self, index):
        for index in range(len(self.test_A_dict_list)):
            img1, label1 = self.test_A_dict_list[index][0], self.test_A_dict_list[index][1]
        for m, n in self.test_B_dict.items():
            img2, label2 = m, n
        if self.transform is not None:
            img1 = Image.open(img1)
            img2 = Image.open(img2)
        return (img1, img2),label1,label2

    def __len__(self):
        return len(self.test_A_dataset)
